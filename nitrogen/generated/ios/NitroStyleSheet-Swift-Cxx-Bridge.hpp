///
/// NitroStyleSheet-Swift-Cxx-Bridge.hpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2024 Marc Rousavy @ Margelo
///

#pragma once

// Forward declarations of C++ defined types
// Forward declaration of `HybridNitroAccessibilityModuleSpec` to properly resolve imports.
namespace margelo::nitro::stylesheet { class HybridNitroAccessibilityModuleSpec; }
// Forward declaration of `HybridNitroDeviceModuleSpec` to properly resolve imports.
namespace margelo::nitro::stylesheet { class HybridNitroDeviceModuleSpec; }

// Forward declarations of Swift defined types
// Forward declaration of `HybridNitroAccessibilityModuleSpecCxx` to properly resolve imports.
namespace NitroStyleSheet { class HybridNitroAccessibilityModuleSpecCxx; }
// Forward declaration of `HybridNitroDeviceModuleSpecCxx` to properly resolve imports.
namespace NitroStyleSheet { class HybridNitroDeviceModuleSpecCxx; }

// Include C++ defined types
#include "HybridNitroAccessibilityModuleSpec.hpp"
#include "HybridNitroDeviceModuleSpec.hpp"
#include <functional>
#include <memory>
#include <optional>

/**
 * Contains specialized versions of C++ templated types so they can be accessed from Swift,
 * as well as helper functions to interact with those C++ types from Swift.
 */
namespace margelo::nitro::stylesheet::bridge::swift {

  // pragma MARK: std::optional<bool>
  /**
   * Specialized version of `std::optional<bool>`.
   */
  using std__optional_bool_ = std::optional<bool>;
  inline std::optional<bool> create_std__optional_bool_(const bool& value) {
    return std::optional<bool>(value);
  }
  
  // pragma MARK: std::function<void(std::optional<bool> /* isEnabled */)>
  /**
   * Specialized version of `std::function<void(std::optional<bool>)>`.
   */
  using Func_void_std__optional_bool_ = std::function<void(std::optional<bool> /* isEnabled */)>;
  /**
   * Wrapper class for a `std::function<void(std::optional<bool> / * isEnabled * /)>`, this can be used from Swift.
   */
  class Func_void_std__optional_bool__Wrapper final {
  public:
    explicit Func_void_std__optional_bool__Wrapper(const std::function<void(std::optional<bool> /* isEnabled */)>& func): _function(func) {}
    explicit Func_void_std__optional_bool__Wrapper(std::function<void(std::optional<bool> /* isEnabled */)>&& func): _function(std::move(func)) {}
    inline void call(std::optional<bool> isEnabled) const {
      _function(isEnabled);
    }
  private:
    std::function<void(std::optional<bool> /* isEnabled */)> _function;
  };
  inline Func_void_std__optional_bool_ create_Func_void_std__optional_bool_(void* _Nonnull closureHolder, void(* _Nonnull call)(void* _Nonnull /* closureHolder */, std::optional<bool>), void(* _Nonnull destroy)(void* _Nonnull)) {
    std::shared_ptr<void> sharedClosureHolder(closureHolder, destroy);
    return Func_void_std__optional_bool_([sharedClosureHolder, call](std::optional<bool> isEnabled) -> void {
      call(sharedClosureHolder.get(), isEnabled);
    });
  }
  inline std::shared_ptr<Func_void_std__optional_bool__Wrapper> share_Func_void_std__optional_bool_(const Func_void_std__optional_bool_& value) {
    return std::make_shared<Func_void_std__optional_bool__Wrapper>(value);
  }
  
  // pragma MARK: std::shared_ptr<margelo::nitro::stylesheet::HybridNitroAccessibilityModuleSpec>
  /**
   * Specialized version of `std::shared_ptr<margelo::nitro::stylesheet::HybridNitroAccessibilityModuleSpec>`.
   */
  using std__shared_ptr_margelo__nitro__stylesheet__HybridNitroAccessibilityModuleSpec_ = std::shared_ptr<margelo::nitro::stylesheet::HybridNitroAccessibilityModuleSpec>;
  std::shared_ptr<margelo::nitro::stylesheet::HybridNitroAccessibilityModuleSpec> create_std__shared_ptr_margelo__nitro__stylesheet__HybridNitroAccessibilityModuleSpec_(void* _Nonnull swiftUnsafePointer);
  void* _Nonnull get_std__shared_ptr_margelo__nitro__stylesheet__HybridNitroAccessibilityModuleSpec_(std__shared_ptr_margelo__nitro__stylesheet__HybridNitroAccessibilityModuleSpec_ cppType);
  
  // pragma MARK: std::shared_ptr<margelo::nitro::stylesheet::HybridNitroDeviceModuleSpec>
  /**
   * Specialized version of `std::shared_ptr<margelo::nitro::stylesheet::HybridNitroDeviceModuleSpec>`.
   */
  using std__shared_ptr_margelo__nitro__stylesheet__HybridNitroDeviceModuleSpec_ = std::shared_ptr<margelo::nitro::stylesheet::HybridNitroDeviceModuleSpec>;
  std::shared_ptr<margelo::nitro::stylesheet::HybridNitroDeviceModuleSpec> create_std__shared_ptr_margelo__nitro__stylesheet__HybridNitroDeviceModuleSpec_(void* _Nonnull swiftUnsafePointer);
  void* _Nonnull get_std__shared_ptr_margelo__nitro__stylesheet__HybridNitroDeviceModuleSpec_(std__shared_ptr_margelo__nitro__stylesheet__HybridNitroDeviceModuleSpec_ cppType);

} // namespace margelo::nitro::stylesheet::bridge::swift
