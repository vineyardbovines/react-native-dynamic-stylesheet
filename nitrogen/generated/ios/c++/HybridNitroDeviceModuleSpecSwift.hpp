///
/// HybridNitroDeviceModuleSpecSwift.hpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2024 Marc Rousavy @ Margelo
///

#pragma once

#include "HybridNitroDeviceModuleSpec.hpp"

// Forward declaration of `HybridNitroDeviceModuleSpecCxx` to properly resolve imports.
namespace NitroStyleSheet { class HybridNitroDeviceModuleSpecCxx; }

// Forward declaration of `DeviceTraits` to properly resolve imports.
namespace margelo::nitro::stylesheet { struct DeviceTraits; }
// Forward declaration of `ColorScheme` to properly resolve imports.
namespace margelo::nitro::stylesheet { enum class ColorScheme; }
// Forward declaration of `ScreenDimensions` to properly resolve imports.
namespace margelo::nitro::stylesheet { struct ScreenDimensions; }
// Forward declaration of `ScreenInsets` to properly resolve imports.
namespace margelo::nitro::stylesheet { struct ScreenInsets; }
// Forward declaration of `ScreenOrientation` to properly resolve imports.
namespace margelo::nitro::stylesheet { enum class ScreenOrientation; }
// Forward declaration of `HapticTypes` to properly resolve imports.
namespace margelo::nitro::stylesheet { enum class HapticTypes; }

#include "DeviceTraits.hpp"
#include "ColorScheme.hpp"
#include "ScreenDimensions.hpp"
#include <string>
#include "ScreenInsets.hpp"
#include "ScreenOrientation.hpp"
#include "HapticTypes.hpp"

#if __has_include(<NitroModules/HybridContext.hpp>)
#include <NitroModules/HybridContext.hpp>
#else
#error NitroModules cannot be found! Are you sure you installed NitroModules properly?
#endif

#include "NitroStyleSheet-Swift-Cxx-Umbrella.hpp"

namespace margelo::nitro::stylesheet {

  /**
   * The C++ part of HybridNitroDeviceModuleSpecCxx.swift.
   *
   * HybridNitroDeviceModuleSpecSwift (C++) accesses HybridNitroDeviceModuleSpecCxx (Swift), and might
   * contain some additional bridging code for C++ <> Swift interop.
   *
   * Since this obviously introduces an overhead, I hope at some point in
   * the future, HybridNitroDeviceModuleSpecCxx can directly inherit from the C++ class HybridNitroDeviceModuleSpec
   * to simplify the whole structure and memory management.
   */
  class HybridNitroDeviceModuleSpecSwift: public virtual HybridNitroDeviceModuleSpec {
  public:
    // Constructor from a Swift instance
    explicit HybridNitroDeviceModuleSpecSwift(const NitroStyleSheet::HybridNitroDeviceModuleSpecCxx& swiftPart):
      HybridObject(HybridNitroDeviceModuleSpec::TAG),
      _swiftPart(swiftPart) { }

  public:
    // Get the Swift part
    inline NitroStyleSheet::HybridNitroDeviceModuleSpecCxx getSwiftPart() noexcept { return _swiftPart; }

  public:
    // Get memory pressure
    inline size_t getExternalMemorySize() noexcept override {
      return _swiftPart.getMemorySize();
    }

  public:
    // Properties
    

  public:
    // Methods
    inline DeviceTraits getDeviceTraits() override {
      auto __result = _swiftPart.getDeviceTraits();
      return __result;
    }
    inline void runHaptic(HapticTypes type) override {
      _swiftPart.runHaptic(static_cast<int>(type));
    }
    inline ColorScheme getColorScheme() override {
      auto __result = _swiftPart.getColorScheme();
      return static_cast<ColorScheme>(__result);
    }
    inline ScreenDimensions getScreenDimensions() override {
      auto __result = _swiftPart.getScreenDimensions();
      return __result;
    }
    inline std::string getContentSizeCategory() override {
      auto __result = _swiftPart.getContentSizeCategory();
      return __result;
    }
    inline ScreenInsets getScreenInsets() override {
      auto __result = _swiftPart.getScreenInsets();
      return __result;
    }
    inline double getDisplayScale() override {
      auto __result = _swiftPart.getDisplayScale();
      return __result;
    }
    inline double getFontScale() override {
      auto __result = _swiftPart.getFontScale();
      return __result;
    }
    inline bool getIsRTL() override {
      auto __result = _swiftPart.getIsRTL();
      return __result;
    }
    inline ScreenOrientation getScreenOrientation() override {
      auto __result = _swiftPart.getScreenOrientation();
      return static_cast<ScreenOrientation>(__result);
    }
    inline double getPixelRatio() override {
      auto __result = _swiftPart.getPixelRatio();
      return __result;
    }

  private:
    NitroStyleSheet::HybridNitroDeviceModuleSpecCxx _swiftPart;
  };

} // namespace margelo::nitro::stylesheet
