///
/// HybridNitroDeviceModuleSpec.hpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2024 Marc Rousavy @ Margelo
///

#pragma once

#if __has_include(<NitroModules/HybridObject.hpp>)
#include <NitroModules/HybridObject.hpp>
#else
#error NitroModules cannot be found! Are you sure you installed NitroModules properly?
#endif

// Forward declaration of `DeviceTraits` to properly resolve imports.
namespace margelo::nitro::stylesheet { struct DeviceTraits; }
// Forward declaration of `HapticTypes` to properly resolve imports.
namespace margelo::nitro::stylesheet { enum class HapticTypes; }
// Forward declaration of `ColorScheme` to properly resolve imports.
namespace margelo::nitro::stylesheet { enum class ColorScheme; }
// Forward declaration of `ScreenDimensions` to properly resolve imports.
namespace margelo::nitro::stylesheet { struct ScreenDimensions; }
// Forward declaration of `ScreenInsets` to properly resolve imports.
namespace margelo::nitro::stylesheet { struct ScreenInsets; }
// Forward declaration of `ScreenOrientation` to properly resolve imports.
namespace margelo::nitro::stylesheet { enum class ScreenOrientation; }

#include "DeviceTraits.hpp"
#include "HapticTypes.hpp"
#include "ColorScheme.hpp"
#include "ScreenDimensions.hpp"
#include <string>
#include "ScreenInsets.hpp"
#include "ScreenOrientation.hpp"

namespace margelo::nitro::stylesheet {

  using namespace margelo::nitro;

  /**
   * An abstract base class for `NitroDeviceModule`
   * Inherit this class to create instances of `HybridNitroDeviceModuleSpec` in C++.
   * You must explicitly call `HybridObject`'s constructor yourself, because it is virtual.
   * @example
   * ```cpp
   * class HybridNitroDeviceModule: public HybridNitroDeviceModuleSpec {
   * public:
   *   HybridNitroDeviceModule(...): HybridObject(TAG) { ... }
   *   // ...
   * };
   * ```
   */
  class HybridNitroDeviceModuleSpec: public virtual HybridObject {
    public:
      // Constructor
      explicit HybridNitroDeviceModuleSpec(): HybridObject(TAG) { }

      // Destructor
      virtual ~HybridNitroDeviceModuleSpec() { }

    public:
      // Properties
      

    public:
      // Methods
      virtual DeviceTraits getDeviceTraits() = 0;
      virtual void runHaptic(HapticTypes type) = 0;
      virtual ColorScheme getColorScheme() = 0;
      virtual ScreenDimensions getScreenDimensions() = 0;
      virtual std::string getContentSizeCategory() = 0;
      virtual ScreenInsets getScreenInsets() = 0;
      virtual double getDisplayScale() = 0;
      virtual double getFontScale() = 0;
      virtual bool getIsRTL() = 0;
      virtual ScreenOrientation getScreenOrientation() = 0;
      virtual double getPixelRatio() = 0;

    protected:
      // Hybrid Setup
      void loadHybridMethods() override;

    protected:
      // Tag for logging
      static constexpr auto TAG = "NitroDeviceModule";
  };

} // namespace margelo::nitro::stylesheet
