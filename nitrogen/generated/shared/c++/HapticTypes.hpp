///
/// HapticTypes.hpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2024 Marc Rousavy @ Margelo
///

#pragma once

#if __has_include(<NitroModules/NitroHash.hpp>)
#include <NitroModules/NitroHash.hpp>
#else
#error NitroModules cannot be found! Are you sure you installed NitroModules properly?
#endif
#if __has_include(<NitroModules/JSIConverter.hpp>)
#include <NitroModules/JSIConverter.hpp>
#else
#error NitroModules cannot be found! Are you sure you installed NitroModules properly?
#endif
#if __has_include(<NitroModules/NitroDefines.hpp>)
#include <NitroModules/NitroDefines.hpp>
#else
#error NitroModules cannot be found! Are you sure you installed NitroModules properly?
#endif

namespace margelo::nitro::stylesheet {

  /**
   * An enum which can be represented as a JavaScript union (HapticTypes).
   */
  enum class HapticTypes {
    LIGHT      SWIFT_NAME(light) = 0,
    SELECT      SWIFT_NAME(select) = 1,
    SUCCESS      SWIFT_NAME(success) = 2,
    WARNING      SWIFT_NAME(warning) = 3,
    ERROR      SWIFT_NAME(error) = 4,
    MEDIUM      SWIFT_NAME(medium) = 5,
    HEAVY      SWIFT_NAME(heavy) = 6,
    SOFT      SWIFT_NAME(soft) = 7,
    RIGID      SWIFT_NAME(rigid) = 8,
  } CLOSED_ENUM;

} // namespace margelo::nitro::stylesheet

namespace margelo::nitro {

  using namespace margelo::nitro::stylesheet;

  // C++ HapticTypes <> JS HapticTypes (union)
  template <>
  struct JSIConverter<HapticTypes> {
    static inline HapticTypes fromJSI(jsi::Runtime& runtime, const jsi::Value& arg) {
      std::string unionValue = JSIConverter<std::string>::fromJSI(runtime, arg);
      switch (hashString(unionValue.c_str(), unionValue.size())) {
        case hashString("light"): return HapticTypes::LIGHT;
        case hashString("select"): return HapticTypes::SELECT;
        case hashString("success"): return HapticTypes::SUCCESS;
        case hashString("warning"): return HapticTypes::WARNING;
        case hashString("error"): return HapticTypes::ERROR;
        case hashString("medium"): return HapticTypes::MEDIUM;
        case hashString("heavy"): return HapticTypes::HEAVY;
        case hashString("soft"): return HapticTypes::SOFT;
        case hashString("rigid"): return HapticTypes::RIGID;
        default: [[unlikely]]
          throw std::invalid_argument("Cannot convert \"" + unionValue + "\" to enum HapticTypes - invalid value!");
      }
    }
    static inline jsi::Value toJSI(jsi::Runtime& runtime, HapticTypes arg) {
      switch (arg) {
        case HapticTypes::LIGHT: return JSIConverter<std::string>::toJSI(runtime, "light");
        case HapticTypes::SELECT: return JSIConverter<std::string>::toJSI(runtime, "select");
        case HapticTypes::SUCCESS: return JSIConverter<std::string>::toJSI(runtime, "success");
        case HapticTypes::WARNING: return JSIConverter<std::string>::toJSI(runtime, "warning");
        case HapticTypes::ERROR: return JSIConverter<std::string>::toJSI(runtime, "error");
        case HapticTypes::MEDIUM: return JSIConverter<std::string>::toJSI(runtime, "medium");
        case HapticTypes::HEAVY: return JSIConverter<std::string>::toJSI(runtime, "heavy");
        case HapticTypes::SOFT: return JSIConverter<std::string>::toJSI(runtime, "soft");
        case HapticTypes::RIGID: return JSIConverter<std::string>::toJSI(runtime, "rigid");
        default: [[unlikely]]
          throw std::invalid_argument("Cannot convert HapticTypes to JS - invalid value: "
                                    + std::to_string(static_cast<int>(arg)) + "!");
      }
    }
    static inline bool canConvert(jsi::Runtime& runtime, const jsi::Value& value) {
      if (!value.isString()) {
        return false;
      }
      std::string unionValue = JSIConverter<std::string>::fromJSI(runtime, value);
      switch (hashString(unionValue.c_str(), unionValue.size())) {
        case hashString("light"):
        case hashString("select"):
        case hashString("success"):
        case hashString("warning"):
        case hashString("error"):
        case hashString("medium"):
        case hashString("heavy"):
        case hashString("soft"):
        case hashString("rigid"):
          return true;
        default:
          return false;
      }
    }
  };

} // namespace margelo::nitro
