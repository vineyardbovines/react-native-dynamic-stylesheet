///
/// ScreenInsets.hpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2024 Marc Rousavy @ Margelo
///

#pragma once

#if __has_include(<NitroModules/JSIConverter.hpp>)
#include <NitroModules/JSIConverter.hpp>
#else
#error NitroModules cannot be found! Are you sure you installed NitroModules properly?
#endif
#if __has_include(<NitroModules/NitroDefines.hpp>)
#include <NitroModules/NitroDefines.hpp>
#else
#error NitroModules cannot be found! Are you sure you installed NitroModules properly?
#endif





namespace margelo::nitro::stylesheet {

  /**
   * A struct which can be represented as a JavaScript object (ScreenInsets).
   */
  struct ScreenInsets {
  public:
    double top     SWIFT_PRIVATE;
    double left     SWIFT_PRIVATE;
    double bottom     SWIFT_PRIVATE;
    double right     SWIFT_PRIVATE;

  public:
    explicit ScreenInsets(double top, double left, double bottom, double right): top(top), left(left), bottom(bottom), right(right) {}
  };

} // namespace margelo::nitro::stylesheet

namespace margelo::nitro {

  using namespace margelo::nitro::stylesheet;

  // C++ ScreenInsets <> JS ScreenInsets (object)
  template <>
  struct JSIConverter<ScreenInsets> {
    static inline ScreenInsets fromJSI(jsi::Runtime& runtime, const jsi::Value& arg) {
      jsi::Object obj = arg.asObject(runtime);
      return ScreenInsets(
        JSIConverter<double>::fromJSI(runtime, obj.getProperty(runtime, "top")),
        JSIConverter<double>::fromJSI(runtime, obj.getProperty(runtime, "left")),
        JSIConverter<double>::fromJSI(runtime, obj.getProperty(runtime, "bottom")),
        JSIConverter<double>::fromJSI(runtime, obj.getProperty(runtime, "right"))
      );
    }
    static inline jsi::Value toJSI(jsi::Runtime& runtime, const ScreenInsets& arg) {
      jsi::Object obj(runtime);
      obj.setProperty(runtime, "top", JSIConverter<double>::toJSI(runtime, arg.top));
      obj.setProperty(runtime, "left", JSIConverter<double>::toJSI(runtime, arg.left));
      obj.setProperty(runtime, "bottom", JSIConverter<double>::toJSI(runtime, arg.bottom));
      obj.setProperty(runtime, "right", JSIConverter<double>::toJSI(runtime, arg.right));
      return obj;
    }
    static inline bool canConvert(jsi::Runtime& runtime, const jsi::Value& value) {
      if (!value.isObject()) {
        return false;
      }
      jsi::Object obj = value.getObject(runtime);
      if (!JSIConverter<double>::canConvert(runtime, obj.getProperty(runtime, "top"))) return false;
      if (!JSIConverter<double>::canConvert(runtime, obj.getProperty(runtime, "left"))) return false;
      if (!JSIConverter<double>::canConvert(runtime, obj.getProperty(runtime, "bottom"))) return false;
      if (!JSIConverter<double>::canConvert(runtime, obj.getProperty(runtime, "right"))) return false;
      return true;
    }
  };

} // namespace margelo::nitro
