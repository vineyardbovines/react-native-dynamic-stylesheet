///
/// HybridNitroAccessibilityModuleSpec.hpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2024 Marc Rousavy @ Margelo
///

#pragma once

#include <NitroModules/JHybridObject.hpp>
#include <fbjni/fbjni.h>
#include "HybridNitroAccessibilityModuleSpec.hpp"




namespace margelo::nitro::stylesheet {

  using namespace facebook;

  class JHybridNitroAccessibilityModuleSpec: public jni::HybridClass<JHybridNitroAccessibilityModuleSpec, JHybridObject>,
                                             public virtual HybridNitroAccessibilityModuleSpec {
  public:
    static auto constexpr kJavaDescriptor = "Lcom/margelo/nitro/stylesheet/HybridNitroAccessibilityModuleSpec;";
    static jni::local_ref<jhybriddata> initHybrid(jni::alias_ref<jhybridobject> jThis);
    static void registerNatives();

  protected:
    // C++ constructor (called from Java via `initHybrid()`)
    explicit JHybridNitroAccessibilityModuleSpec(jni::alias_ref<jhybridobject> jThis) :
      HybridObject(HybridNitroAccessibilityModuleSpec::TAG),
      _javaPart(jni::make_global(jThis)) {}

  public:
    virtual ~JHybridNitroAccessibilityModuleSpec() {
      // Hermes GC can destroy JS objects on a non-JNI Thread.
      jni::ThreadScope::WithClassLoader([&] { _javaPart.reset(); });
    }

  public:
    size_t getExternalMemorySize() noexcept override;

  public:
    inline const jni::global_ref<JHybridNitroAccessibilityModuleSpec::javaobject>& getJavaPart() const noexcept {
      return _javaPart;
    }

  public:
    // Properties
    

  public:
    // Methods
    void removeListeners() override;
    AccessibilitySettings getAllSettings() override;
    std::optional<bool> getIsReduceMotionEnabled() override;
    void addReduceMotionListener(const std::function<void(std::optional<bool> /* isEnabled */)>& onChanged) override;
    std::optional<bool> getIsReduceTransparencyEnabled() override;
    void addReduceTransparencyListener(const std::function<void(std::optional<bool> /* isEnabled */)>& onChanged) override;
    std::optional<bool> getIsDifferentiateWithoutColorEnabled() override;
    void addDifferentiateWithoutColorListener(const std::function<void(std::optional<bool> /* isEnabled */)>& onChanged) override;
    std::optional<bool> getIsInvertColorsEnabled() override;
    void addInvertColorsListener(const std::function<void(std::optional<bool> /* isEnabled */)>& onChanged) override;
    std::optional<bool> getIsShowButtonShapesEnabled() override;
    void addShowButtonShapesListener(const std::function<void(std::optional<bool> /* isEnabled */)>& onChanged) override;
    std::optional<bool> getIsBoldTextEnabled() override;
    void addBoldTextListener(const std::function<void(std::optional<bool> /* isEnabled */)>& onChanged) override;
    std::optional<bool> getIsVoiceOverEnabled() override;
    void addVoiceOverListener(const std::function<void(std::optional<bool> /* isEnabled */)>& onChanged) override;
    std::optional<bool> getIsSwitchControlEnabled() override;
    void addSwitchControlListener(const std::function<void(std::optional<bool> /* isEnabled */)>& onChanged) override;
    std::optional<bool> getIsVideoAutoplayEnabled() override;
    void addVideoAutoplayListener(const std::function<void(std::optional<bool> /* isEnabled */)>& onChanged) override;
    std::optional<bool> getIsClosedCaptioningEnabled() override;
    void addClosedCaptioningListener(const std::function<void(std::optional<bool> /* isEnabled */)>& onChanged) override;
    std::optional<bool> getPrefersCrossFadeTransitionsEnabled() override;
    void addPrefersCrossFadeTransitionsListener(const std::function<void(std::optional<bool> /* isEnabled */)>& onChanged) override;
    std::optional<bool> getIsGrayscaleEnabled() override;
    void addGrayscaleListener(const std::function<void(std::optional<bool> /* isEnabled */)>& onChanged) override;
    std::optional<bool> getIsDarkerSystemColorsEnabled() override;
    void addDarkerSystemColorsListener(const std::function<void(std::optional<bool> /* isEnabled */)>& onChanged) override;
    std::optional<bool> getIsMonoAudioEnabled() override;
    void addMonoAudioListener(const std::function<void(std::optional<bool> /* isEnabled */)>& onChanged) override;
    std::optional<bool> getIsShakeToUndoEnabled() override;
    void addShakeToUndoListener(const std::function<void(std::optional<bool> /* isEnabled */)>& onChanged) override;
    std::optional<bool> getIsSpeakScreenEnabled() override;
    void addSpeakScreenListener(const std::function<void(std::optional<bool> /* isEnabled */)>& onChanged) override;
    std::optional<bool> getIsSpeakSelectionEnabled() override;
    void addSpeakSelectionListener(const std::function<void(std::optional<bool> /* isEnabled */)>& onChanged) override;
    std::optional<bool> getIsOnOffSwitchLabelsEnabled() override;
    void addOnOffSwitchLabelsListener(const std::function<void(std::optional<bool> /* isEnabled */)>& onChanged) override;

  private:
    friend HybridBase;
    using HybridBase::HybridBase;
    jni::global_ref<JHybridNitroAccessibilityModuleSpec::javaobject> _javaPart;
  };

} // namespace margelo::nitro::stylesheet
